---
import type { CollectionEntry } from "astro:content";
import { title } from "radash";
interface Props {
    certification: CollectionEntry<"certifications">;
}

const { certification } = Astro.props;
const { headings } = await certification.render();
---

<aside class="relative xl:col-start-10 xl:col-span-3 lg:col-span-6 lg:m-0 xl:p-8 hidden lg:block">
    <div class="xl:border rounded-lg sticky top-16 p-2 py-4">
        <h2 class="text-lg font-semibold text-zinc-900 px-4 py-2">
            Table of contents
        </h2>
        <nav class="p-4 text-zinc-900">
            <ul>
                { headings.map((heading) => (
                    <li class:list={ [
                        {
                            "ml-4":  heading.depth === 1,
                            "ml-8":  heading.depth === 2,
                            "ml-12": heading.depth === 3,
                            "ml-16": heading.depth === 4,
                            "ml-20": heading.depth === 5,
                            "ml-24": heading.depth === 6,
                        },
                    ] }
                    >
                        <a href={ `#${ heading.slug }` }
                           id={ `toc-${ heading.slug }` }
                           class="text-sm hover:text-indigo-600"
                           title="Jump to section"
                        >
                            { heading.text.replaceAll(/[:.]$/g, "") }
                        </a>
                    </li>
                )) }
            </ul>
        </nav>
    </div>
</aside>
<script>
    const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
            const id = entry.target.getAttribute("id");
            const tocLink = document.querySelector(`#toc-${ id }`);

            if (entry.isIntersecting) {
                tocLink?.classList.add("font-semibold", "text-indigo-600");
            }
            else {
                tocLink?.classList.remove("font-semibold", "text-indigo-600");
            }
        });
    }, {
        rootMargin: "0% 0% -50% 0%",
        threshold:  0.1,
    });

    document.querySelectorAll("article h1, article h2, article h3, article h4, article h5, article h6")
        .forEach((heading) => {
            observer.observe(heading);
        });
</script>