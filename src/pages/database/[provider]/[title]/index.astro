---
import Layout from "@layouts/Layout.astro";
import { getCollection } from "astro:content";
import { title } from "radash";
import { Image } from "astro:assets";

/**
 * Get the paths for the static site generation.
 */
export async function getStaticPaths() {
    const certifications = await getCollection("certifications", (entry) => {
        return !entry.data.draft;
    });

    return certifications.map((certification) => {
        const [ provider, title ] = certification.slug.split("/");

        return {
            params: {
                provider,
                title,
            },
            props:  {
                certification,
            },
        };
    });
}

const { certification } = Astro.props;
const {
          Content,
          headings,
      } = await certification.render();
const provider = title(certification.slug.split("/")[0]);
const data = certification.data;
---

<Layout title="CyberPath">
    <main class="pb-24 grid grid-cols-12 relative">
        <Image
            src={ data.image }
            alt={ data.title }
            class="row-start-1 col-span-full h-[32rem] object-cover object-center mb-8"
        />
        <aside class="relative col-span-3 p-8 row-start-2">
            <div class="border rounded-lg shadow-md bg-white sticky top-16 p-2 py-4">
                <h2 class="text-lg font-semibold text-zinc-900 px-4 py-2">
                    Certification details
                </h2>
                <table>
                    <tbody>
                        <tr>
                            <td class="font-semibold text-zinc-900 px-4 py-2 align-text-top">
                                Provider
                            </td>
                            <td class="px-4 py-2">
                                { provider }
                            </td>
                        </tr>
                        <tr>
                            <td class="font-semibold text-zinc-900 px-4 py-2 align-text-top">
                                Acronym
                            </td>
                            <td class="px-4 py-2">
                                { data.acronym }
                            </td>
                        </tr>
                        <tr>
                            <td class="font-semibold text-zinc-900 px-4 py-2 align-text-top">
                                Last updated
                            </td>
                            <td class="px-4 py-2">
                                { data.last_updated_at.toLocaleDateString() }
                            </td>
                        </tr>
                        <tr>
                            <td class="font-semibold text-zinc-900 px-4 py-2 align-text-top">
                                Price
                            </td>
                            <td class="px-4 py-2">
                                { (+data.price).toFixed(2) } { data.currency }
                            </td>
                        </tr>
                        <tr>
                            <td class="font-semibold text-zinc-900 px-4 py-2 align-text-top">
                                Career paths
                            </td>
                            <td class="px-4 py-2">
                                <ul class="list-disc list-inside">
                                    { data.career_paths.map((path) => (
                                        <li>
                                            { path }
                                        </li>
                                    )) }
                                </ul>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div class="flex items-center justify-start mx-4">
                    <a class="border rounded-md p-2 aspect-square shadow-sm"
                       href={ data.reference }
                       target="_blank"
                       title="Visit the official website"
                       aria-label="Visit the official website"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg"
                             width="18"
                             height="18"
                             viewBox="0 0 24 24"
                             fill="none"
                             stroke="currentColor"
                             stroke-width="2"
                             stroke-linecap="round"
                             stroke-linejoin="round"
                             class="icon icon-tabler icons-tabler-outline icon-tabler-link"
                        >
                            <path stroke="none"
                                  d="M0 0h24v24H0z"
                                  fill="none"
                            />
                            <path d="M9 15l6 -6" />
                            <path d="M11 6l.463 -.536a5 5 0 0 1 7.071 7.072l-.534 .464" />
                            <path d="M13 18l-.397 .534a5.068 5.068 0 0 1 -7.127 0a4.972 4.972 0 0 1 0 -7.071l.524 -.463" />
                        </svg>
                    </a>
                    <a href="/user-contribution"
                       class="ml-auto text-sm font-semibold hover:text-indigo-500"
                    >
                        Suggest an edit
                    </a>
                </div>
            </div>
        </aside>
        <article class="prose prose-zinc w-full max-w-5xl col-start-4 col-span-6 row-start-2 border rounded-md shadow-md bg-white p-12">
            <Content />
        </article>
        <aside class="relative col-start-10 col-span-3 p-8 row-start-2">
            <div class="border rounded-lg shadow-md bg-white sticky top-16 p-2">
                <h2 class="text-lg font-semibold text-zinc-900 px-4 py-2">
                    Table of contents
                </h2>
                <nav class="p-4">
                    <ul>
                        { headings.map((heading) => (
                            <li class:list={ [
                                {
                                    "ml-4":  heading.depth === 1,
                                    "ml-8":  heading.depth === 2,
                                    "ml-12": heading.depth === 3,
                                    "ml-16": heading.depth === 4,
                                    "ml-20": heading.depth === 5,
                                    "ml-24": heading.depth === 6,
                                },
                            ] }
                            >
                                <a href={ `#${ heading.slug }` }
                                   id={ `toc-${ heading.slug }` }
                                   class="text-sm text-zinc-900 hover:text-indigo-600"
                                >
                                    { heading.text.replaceAll(/[:.]$/g, "") }
                                </a>
                            </li>
                        )) }
                    </ul>
                </nav>
            </div>
        </aside>
    </main>
</Layout>
<script>
    const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
            const id = entry.target.getAttribute("id");
            const tocLink = document.querySelector(`#toc-${ id }`);

            if (entry.isIntersecting) {
                tocLink?.classList.add("font-semibold", "text-indigo-600");
            }
            else {
                tocLink?.classList.remove("font-semibold", "text-indigo-600");
            }
        });
    }, {
        rootMargin: "0% 0% -50% 0%",
        threshold:  0.1,
    });

    document.querySelectorAll("article h1, article h2, article h3, article h4, article h5, article h6")
        .forEach((heading) => {
            observer.observe(heading);
        });
</script>